#!/bin/bash
#
# purist-mode: A script to optimize the system for critical listening by minimizing
#              background processes. It also updates /etc/motd with the current status.
#
# This script will invoke 'sudo' internally for commands requiring elevation.
#

# --- Configuration ---
NSSWITCH_CONF="/etc/nsswitch.conf"
BACKUP_FILE="${NSSWITCH_CONF}.purist-bak"
MOTD_FILE="/etc/motd"

# --- Functions ---

# Function to activate Purist Mode
activate_mode() {
    echo "🚀 Activating Purist Mode..."

    # Stop services to reduce background processing
    echo "  -> Stopping time synchronization service (chronyd)..."
    sudo systemctl stop chronyd &>/dev/null
    echo "  -> Stopping Argon One daemon (argononed.service)..."
    sudo systemctl stop argononed.service &>/dev/null

    # Disable DNS lookups
    echo "  -> Disabling DNS lookups..."
    if [ ! -f "$BACKUP_FILE" ]; then
        sudo cp "$NSSWITCH_CONF" "$BACKUP_FILE"
        echo "     Backup of ${NSSWITCH_CONF} created."
    fi
    sudo sed -i -E 's/^(hosts:).*/\1 files myhostname/' "$NSSWITCH_CONF"
    echo "     DNS lookups disabled (set to local-only resolution)."

    # Drop the default gateway
    echo "  -> Dropping default gateway..."
    sudo ip route del default &>/dev/null
    
    # Update the Message of the Day (MOTD) with an affirming message
    echo "  -> Updating login message..."
    # First, remove any existing Purist Mode status line to prevent duplicates.
    sudo sed -i '/Purist Mode is/d' "$MOTD_FILE"
    # Now, append the new status line. The -a flag for tee appends instead of overwriting.
    echo -e "\n\e[1;32m✅ Purist Mode is ACTIVE.\e[0m System optimized for the highest sound quality.\n" | sudo tee -a "$MOTD_FILE" > /dev/null
    echo "     Login message set to 'Purist Mode'."

    echo ""
    echo "✅ Purist Mode is ACTIVE."
    echo "   To restore normal operation, run: purist-mode --revert"
}

# Function to revert changes
revert_mode() {
    echo "⏪ Reverting to Standard Mode..."

    # Restore network gateway
    echo "  -> Restoring network..."
    sudo systemctl restart systemd-networkd &>/dev/null
    
    # Restore DNS configuration
    echo "  -> Restoring DNS configuration..."
    if [ -f "$BACKUP_FILE" ]; then
        sudo mv "$BACKUP_FILE" "$NSSWITCH_CONF"
    fi

    # Restart services
    echo "  -> Restarting background services..."
    sudo systemctl start chronyd &>/dev/null
    sudo systemctl start argononed.service &>/dev/null

    # Update the MOTD with a cautionary message
    echo "  -> Updating login message..."
    # First, remove any existing Purist Mode status line.
    sudo sed -i '/Purist Mode is/d' "$MOTD_FILE"
    # Now, append the new, more concise status line.
    echo -e "\n\e[1;33m⚠️ CAUTION: Purist Mode is DISABLED.\e[0m Background activity may impact sound quality.\n" | sudo tee -a "$MOTD_FILE" > /dev/null
    echo "     Login message set to 'Standard Mode'."

    echo ""
    echo "✅ Purist Mode DISABLED. System is in standard operation mode."
}

# --- Main Script Logic ---

# Check for `sudo` availability
if ! command -v sudo &> /dev/null; then
    echo "Error: 'sudo' command not found. This script requires sudo to run."
    exit 1
fi

# Check if we need sudo and prompt for password if we do.
if [ "$EUID" -ne 0 ]; then
    echo "This script requires sudo privileges. You may be prompted for a password."
    echo "(Note: The default sudo password for Audiolinux is 'audiolinux0')"
    sudo -v || exit 1 # Prompt for password now.
    # Keep the sudo ticket alive
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
fi

# Parse arguments to decide whether to activate or revert
if [[ "$1" == "--revert" || "$1" == "-r" ]]; then
    revert_mode
else
    # Check if we are already in purist mode
    if [ -f "$BACKUP_FILE" ]; then
        echo " Purist Mode is already active."
        exit 0
    fi
    activate_mode
fi

exit 0
