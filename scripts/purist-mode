#!/bin/bash
#
# purist-mode: A script to optimize the system for critical listening by minimizing
#              background processes. This script will invoke 'sudo' internally for
#              commands requiring elevation.
#

# --- Configuration ---
NSSWITCH_CONF="/etc/nsswitch.conf"
BACKUP_FILE="${NSSWITCH_CONF}.purist-bak"

# --- Functions ---

# Function to activate Purist Mode
activate_mode() {
    echo "🚀 Activating Purist Mode..."

    # Stop non-essential services (chronyd for time sync)
    echo "  -> Stopping time synchronization service (chronyd)..."
    sudo systemctl stop chronyd &>/dev/null

    # Create backup file before making changes
    sudo cp "$NSSWITCH_CONF" "$BACKUP_FILE"

    # Modify config files and network state
    echo "  -> Disabling DNS lookups..."
    sudo sed -i -E 's/^(hosts:).*/\1 files myhostname/' "$NSSWITCH_CONF"
    echo "  -> Dropping default gateway..."
    sudo ip route del default &>/dev/null

    echo ""
    echo "✅ Purist Mode is ACTIVE."
}

# Function to revert changes
revert_mode() {
    # Idempotency check. This will now continue to the license check.
    if [ ! -f "$BACKUP_FILE" ]; then
        echo "✅ System is already in standard operation mode."
    fi

    echo "⏪ Reverting to Standard Mode..."

    # Restore network and DNS configuration if a backup exists.
    if [ -f "$BACKUP_FILE" ]; then
        sudo mv "$BACKUP_FILE" "$NSSWITCH_CONF"
    fi

    # If no default route exists, restart networking.
    if ! ip route | grep -q default; then
        sudo systemctl restart systemd-networkd &>/dev/null
    fi

    # Always restart services when this script is called.
    echo "  -> Restarting services..."
    sudo systemctl start chronyd &>/dev/null

    # --- Diretta license cache logic (Corrected) ---
    local CACHE_DIR="/var/opt/diretta-alsa-target"
    local CACHE_FILE="${CACHE_DIR}/diretta_license_url.cache"
    local LICENSE_APP="/opt/diretta-alsa-target/diretta_app_activate"

    # Assume the system is unlicensed until the license file is found.
    local is_licensed=false
    for entry in /opt/diretta-alsa-target/*; do
        [ -e "$entry" ] || break
        # If we find a file not starting with 'diretta', it is the license file.
        if [[ "$(basename "$entry")" != "diretta"* ]]; then
            is_licensed=true
            break
        fi
    done

    # If it IS licensed, write "Licensed" to the cache.
    if [ "$is_licensed" = true ]; then
        echo "Licensed" | sudo tee "$CACHE_FILE" > /dev/null
    # Otherwise, it's UNLICENSED, so if the cache is missing, get the URL.
    elif [ ! -s "$CACHE_FILE" ]; then
        local license_url
        license_url=$(sudo "$LICENSE_APP" GetLicenseStatusUrl)

        if [ -n "$license_url" ]; then
            echo "$license_url" | sudo tee "$CACHE_FILE" > /dev/null
        else
            sudo rm -f "$CACHE_FILE"
        fi
    fi
    # --- END ---

    echo ""
    echo "✅ Purist Mode DISABLED. System is in standard operation mode."
}

# --- Main Script Logic ---

# Failsafe check to prevent running on the wrong machine.
if (( $(ip -br addr | wc -l) > 2 )); then
    echo -e "\n\e[1;31mERROR: Detected multiple network interfaces.\e[0m" >&2
    echo "This script is designed for the single-interface 'Diretta Target' ONLY." >&2
    exit 1
fi

# Check for `sudo` availability
if ! command -v sudo &> /dev/null; then
    echo "Error: 'sudo' command not found. This script requires sudo to run." >&2
    exit 1
fi

# Sudo prompt logic for interactive sessions
if [ "$EUID" -ne 0 ]; then
    echo "This script requires sudo privileges. You may be prompted for a password."
    sudo -v || exit 1
fi

# Parse arguments
if [[ "$1" == "--revert" || "$1" == "-r" ]]; then
    revert_mode
else
    if [ -f "$BACKUP_FILE" ]; then
        echo "✅ Purist Mode is already active."
        exit 0
    fi
    activate_mode
fi

exit 0
